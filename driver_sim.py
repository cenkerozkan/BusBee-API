import asyncio
import websockets
import json
from datetime import datetime
import pytz

# Sample journal data - you can load this from a file
SAMPLE_JOURNAL = {
    "journal_uuid": "d35763d3-cb3d-45c5-95ee-5f0bd32b9f65",
      "locations": [
    {
      "lat": 39.843456,
      "lon": 32.8027642,
      "time": "2025-05-13T08:26:48.018995"
    },
    {
      "lat": 39.843456,
      "lon": 32.8027642,
      "time": "2025-05-13T08:26:48.024227"
    },
    {
      "lat": 39.843456,
      "lon": 32.8027642,
      "time": "2025-05-13T08:26:51.462134"
    },
    {
      "lat": 39.8430749,
      "lon": 32.8010595,
      "time": "2025-05-13T08:26:57.253805"
    },
    {
      "lat": 39.8430749,
      "lon": 32.8010595,
      "time": "2025-05-13T08:26:59.467868"
    },
    {
      "lat": 39.843388,
      "lon": 32.799795,
      "time": "2025-05-13T08:27:06.262665"
    },
    {
      "lat": 39.843388,
      "lon": 32.799795,
      "time": "2025-05-13T08:27:09.446744"
    },
    {
      "lat": 39.8436631,
      "lon": 32.7982979,
      "time": "2025-05-13T08:27:14.285938"
    },
    {
      "lat": 39.8436631,
      "lon": 32.7982979,
      "time": "2025-05-13T08:27:15.451064"
    },
    {
      "lat": 39.8440156,
      "lon": 32.7966717,
      "time": "2025-05-13T08:27:22.283152"
    },
    {
      "lat": 39.8443652,
      "lon": 32.7948667,
      "time": "2025-05-13T08:27:30.275401"
    },
    {
      "lat": 39.8443671,
      "lon": 32.7948545,
      "time": "2025-05-13T08:27:33.461495"
    },
    {
      "lat": 39.8448157,
      "lon": 32.7934197,
      "time": "2025-05-13T08:27:38.288369"
    },
    {
      "lat": 39.8448214,
      "lon": 32.7934148,
      "time": "2025-05-13T08:27:41.458775"
    },
    {
      "lat": 39.8450529,
      "lon": 32.7918213,
      "time": "2025-05-13T08:27:46.260509"
    },
    {
      "lat": 39.8450529,
      "lon": 32.7918213,
      "time": "2025-05-13T08:27:49.451379"
    },
    {
      "lat": 39.844466,
      "lon": 32.7902162,
      "time": "2025-05-13T08:27:54.263917"
    },
    {
      "lat": 39.844466,
      "lon": 32.7902162,
      "time": "2025-05-13T08:27:55.444731"
    },
    {
      "lat": 39.8444294,
      "lon": 32.7901584,
      "time": "2025-05-13T08:27:57.436850"
    },
    {
      "lat": 39.8438713,
      "lon": 32.7879903,
      "time": "2025-05-13T08:28:04.261721"
    },
    {
      "lat": 39.8438713,
      "lon": 32.7879903,
      "time": "2025-05-13T08:28:07.464025"
    },
    {
      "lat": 39.8439019,
      "lon": 32.7858857,
      "time": "2025-05-13T08:28:12.248548"
    },
    {
      "lat": 39.8439178,
      "lon": 32.7858603,
      "time": "2025-05-13T08:28:15.443906"
    },
    {
      "lat": 39.8444442,
      "lon": 32.7835845,
      "time": "2025-05-13T08:28:21.251969"
    },
    {
      "lat": 39.8444442,
      "lon": 32.7835845,
      "time": "2025-05-13T08:28:23.443644"
    },
    {
      "lat": 39.8442867,
      "lon": 32.7819217,
      "time": "2025-05-13T08:28:30.246949"
    },
    {
      "lat": 39.8442867,
      "lon": 32.7819217,
      "time": "2025-05-13T08:28:33.455338"
    },
    {
      "lat": 39.8438437,
      "lon": 32.7807582,
      "time": "2025-05-13T08:28:38.248345"
    },
    {
      "lat": 39.8438437,
      "lon": 32.7807582,
      "time": "2025-05-13T08:28:39.447329"
    },
    {
      "lat": 39.8434722,
      "lon": 32.7800622,
      "time": "2025-05-13T08:28:47.255748"
    },
    {
      "lat": 39.8434722,
      "lon": 32.7800622,
      "time": "2025-05-13T08:28:51.461523"
    },
    {
      "lat": 39.8434104,
      "lon": 32.7799466,
      "time": "2025-05-13T08:28:57.266138"
    },
    {
      "lat": 39.8434104,
      "lon": 32.7799466,
      "time": "2025-05-13T08:28:59.457283"
    },
    {
      "lat": 39.84347,
      "lon": 32.7801087,
      "time": "2025-05-13T08:29:07.254658"
    },
    {
      "lat": 39.84347,
      "lon": 32.7801087,
      "time": "2025-05-13T08:29:09.453589"
    },
    {
      "lat": 39.8431159,
      "lon": 32.7795957,
      "time": "2025-05-13T08:29:17.251152"
    },
    {
      "lat": 39.8431159,
      "lon": 32.7795957,
      "time": "2025-05-13T08:29:19.464215"
    },
    {
      "lat": 39.842379,
      "lon": 32.7786784,
      "time": "2025-05-13T08:29:26.240231"
    },
    {
      "lat": 39.842379,
      "lon": 32.7786784,
      "time": "2025-05-13T08:29:29.454176"
    },
    {
      "lat": 39.8408513,
      "lon": 32.7767229,
      "time": "2025-05-13T08:29:41.250320"
    },
    {
      "lat": 39.8408513,
      "lon": 32.7767229,
      "time": "2025-05-13T08:29:43.454854"
    },
    {
      "lat": 39.8398776,
      "lon": 32.7754072,
      "time": "2025-05-13T08:29:50.258226"
    },
    {
      "lat": 39.8389851,
      "lon": 32.7741087,
      "time": "2025-05-13T08:29:58.255111"
    },
    {
      "lat": 39.8389851,
      "lon": 32.7741087,
      "time": "2025-05-13T08:30:01.462494"
    },
    {
      "lat": 39.8380914,
      "lon": 32.7729346,
      "time": "2025-05-13T08:30:06.262432"
    },
    {
      "lat": 39.8371131,
      "lon": 32.7717917,
      "time": "2025-05-13T08:30:14.239428"
    },
    {
      "lat": 39.8371131,
      "lon": 32.7717917,
      "time": "2025-05-13T08:30:17.458459"
    },
    {
      "lat": 39.8360872,
      "lon": 32.7703427,
      "time": "2025-05-13T08:30:22.268231"
    },
    {
      "lat": 39.8360872,
      "lon": 32.7703427,
      "time": "2025-05-13T08:30:23.451627"
    },
    {
      "lat": 39.8355274,
      "lon": 32.7685524,
      "time": "2025-05-13T08:30:30.268515"
    },
    {
      "lat": 39.8355274,
      "lon": 32.7685524,
      "time": "2025-05-13T08:30:33.465466"
    },
    {
      "lat": 39.8357418,
      "lon": 32.7668368,
      "time": "2025-05-13T08:30:38.253892"
    },
    {
      "lat": 39.8357418,
      "lon": 32.7668368,
      "time": "2025-05-13T08:30:41.464424"
    },
    {
      "lat": 39.8360658,
      "lon": 32.7658219,
      "time": "2025-05-13T08:30:46.291282"
    },
    {
      "lat": 39.8360649,
      "lon": 32.7658431,
      "time": "2025-05-13T08:30:49.466859"
    },
    {
      "lat": 39.8361054,
      "lon": 32.7657877,
      "time": "2025-05-13T08:30:54.277282"
    },
    {
      "lat": 39.8361054,
      "lon": 32.7657877,
      "time": "2025-05-13T08:30:57.461416"
    },
    {
      "lat": 39.836055,
      "lon": 32.7656375,
      "time": "2025-05-13T08:31:02.252297"
    },
    {
      "lat": 39.836055,
      "lon": 32.7656375,
      "time": "2025-05-13T08:31:03.461886"
    },
    {
      "lat": 39.8361434,
      "lon": 32.7651554,
      "time": "2025-05-13T08:31:10.273454"
    },
    {
      "lat": 39.8361434,
      "lon": 32.7651554,
      "time": "2025-05-13T08:31:13.460752"
    },
    {
      "lat": 39.8364059,
      "lon": 32.764138,
      "time": "2025-05-13T08:31:19.247540"
    },
    {
      "lat": 39.8364059,
      "lon": 32.764138,
      "time": "2025-05-13T08:31:19.443525"
    },
    {
      "lat": 39.8364059,
      "lon": 32.764138,
      "time": "2025-05-13T08:31:23.457373"
    },
    {
      "lat": 39.8365161,
      "lon": 32.7627786,
      "time": "2025-05-13T08:31:28.247363"
    },
    {
      "lat": 39.8365161,
      "lon": 32.7627786,
      "time": "2025-05-13T08:31:29.441759"
    },
    {
      "lat": 39.8364365,
      "lon": 32.7619787,
      "time": "2025-05-13T08:31:36.279066"
    },
    {
      "lat": 39.8364365,
      "lon": 32.7619787,
      "time": "2025-05-13T08:31:37.454989"
    },
    {
      "lat": 39.836371,
      "lon": 32.761739,
      "time": "2025-05-13T08:31:43.271422"
    },
    {
      "lat": 39.836371,
      "lon": 32.761739,
      "time": "2025-05-13T08:31:45.447417"
    },
    {
      "lat": 39.8363331,
      "lon": 32.7616789,
      "time": "2025-05-13T08:31:52.242501"
    },
    {
      "lat": 39.8363331,
      "lon": 32.7616789,
      "time": "2025-05-13T08:31:55.461100"
    },
    {
      "lat": 39.8361406,
      "lon": 32.7611831,
      "time": "2025-05-13T08:32:00.239116"
    },
    {
      "lat": 39.8361406,
      "lon": 32.7611831,
      "time": "2025-05-13T08:32:03.445660"
    },
    {
      "lat": 39.8361009,
      "lon": 32.761076,
      "time": "2025-05-13T08:32:05.462696"
    },
    {
      "lat": 39.8357868,
      "lon": 32.7599769,
      "time": "2025-05-13T08:32:10.262776"
    },
    {
      "lat": 39.8357868,
      "lon": 32.7599769,
      "time": "2025-05-13T08:32:13.468093"
    },
    {
      "lat": 39.8353891,
      "lon": 32.7588839,
      "time": "2025-05-13T08:32:17.242422"
    },
    {
      "lat": 39.8353891,
      "lon": 32.7588839,
      "time": "2025-05-13T08:32:21.455884"
    },
    {
      "lat": 39.8348387,
      "lon": 32.7574625,
      "time": "2025-05-13T08:32:26.261363"
    },
    {
      "lat": 39.8348387,
      "lon": 32.7574625,
      "time": "2025-05-13T08:32:29.461666"
    },
    {
      "lat": 39.8343489,
      "lon": 32.7564744,
      "time": "2025-05-13T08:32:34.282677"
    },
    {
      "lat": 39.8343489,
      "lon": 32.7564744,
      "time": "2025-05-13T08:32:37.462011"
    },
    {
      "lat": 39.8342462,
      "lon": 32.755943,
      "time": "2025-05-13T08:32:44.268759"
    },
    {
      "lat": 39.8342462,
      "lon": 32.755943,
      "time": "2025-05-13T08:32:47.457634"
    },
    {
      "lat": 39.8342971,
      "lon": 32.7560687,
      "time": "2025-05-13T08:32:52.269133"
    },
    {
      "lat": 39.8342998,
      "lon": 32.756077,
      "time": "2025-05-13T08:32:55.459023"
    },
    {
      "lat": 39.8342565,
      "lon": 32.7562609,
      "time": "2025-05-13T08:33:00.248911"
    },
    {
      "lat": 39.8342565,
      "lon": 32.7562609,
      "time": "2025-05-13T08:33:03.462839"
    },
    {
      "lat": 39.8342686,
      "lon": 32.7562725,
      "time": "2025-05-13T08:33:09.457342"
    },
    {
      "lat": 39.8342159,
      "lon": 32.7561326,
      "time": "2025-05-13T08:33:15.243932"
    },
    {
      "lat": 39.8342159,
      "lon": 32.7561326,
      "time": "2025-05-13T08:33:17.454822"
    },
    {
      "lat": 39.8341022,
      "lon": 32.7559572,
      "time": "2025-05-13T08:33:24.240878"
    },
    {
      "lat": 39.8341022,
      "lon": 32.7559572,
      "time": "2025-05-13T08:33:27.461771"
    },
    {
      "lat": 39.8340353,
      "lon": 32.75583,
      "time": "2025-05-13T08:33:32.450052"
    },
    {
      "lat": 39.8158383,
      "lon": 32.7279208,
      "time": "2025-05-13T08:57:40.088758"
    },
    {
      "lat": 39.8158383,
      "lon": 32.7279208,
      "time": "2025-05-13T08:57:40.176939"
    },
    {
      "lat": 39.8158383,
      "lon": 32.7279208,
      "time": "2025-05-13T08:57:40.188839"
    },
    {
      "lat": 39.8158383,
      "lon": 32.7279208,
      "time": "2025-05-13T08:57:40.202015"
    },
    {
      "lat": 39.8158383,
      "lon": 32.7279208,
      "time": "2025-05-13T08:57:40.216188"
    },
    {
      "lat": 39.8158383,
      "lon": 32.7279208,
      "time": "2025-05-13T08:57:40.653523"
    },
    {
      "lat": 39.8158676,
      "lon": 32.7278251,
      "time": "2025-05-13T08:57:42.021394"
    },
    {
      "lat": 39.8158676,
      "lon": 32.7278251,
      "time": "2025-05-13T08:57:42.025876"
    }
  ]
    }

# Configuration
WS_URL = "ws://busops-acb3c422b0e4.herokuapp.com/driver/ws/update_location"
API_KEY = "wLzmZZ9Q8War3x7mser0yAdlsk3kf5i66DOmmv07"  # Replace with your actual API key
DELAY_SECONDS = 2  # Delay between location updates

async def send_location_updates():
    # Create connection with headers
    async with websockets.connect(
        WS_URL,
        additional_headers={"DRIVER-API-KEY": API_KEY}
    ) as websocket:
        print("Connected to WebSocket server")
        
        while True:  # Run indefinitely
            for location in SAMPLE_JOURNAL["locations"]:
                # Create payload
                payload = {
                    "lat": location["lat"],
                    "lon": location["lon"],
                    "timestamp": location["time"],
                    "journal_uuid": SAMPLE_JOURNAL["journal_uuid"]
                }
                
                # Send payload
                await websocket.send(json.dumps(payload))
                print(f"Sent location: {payload}")
                
                # Wait for response
                response = await websocket.recv()
                print(f"Received response: {response}")
                
                # Add delay before next location
                await asyncio.sleep(DELAY_SECONDS)
            
            print("Reached end of locations, starting over...")

async def main():
    try:
        while True:
            try:
                await send_location_updates()
            except websockets.exceptions.ConnectionClosed:
                print("Connection closed, attempting to reconnect...")
                await asyncio.sleep(5)  # Wait 5 seconds before reconnecting
            except Exception as e:
                print(f"Error occurred: {str(e)}")
                await asyncio.sleep(5)  # Wait 5 seconds before retrying

    except KeyboardInterrupt:
        print("\nScript terminated by user")

if __name__ == "__main__":
    asyncio.run(main())